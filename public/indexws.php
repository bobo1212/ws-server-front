<?php

use App\Kernel;
use Symfony\Component\HttpFoundation\InputBag;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\TerminableInterface;
use Symfony\Component\Runtime\Runner\Symfony\HttpKernelRunner;

global $_GET;
global $_POST;
global $_COOKIE;
global $_FILES;
global $_SERVER;

function onRequest(OpenSwoole\Http\Request $wsRequest, OpenSwoole\Http\Response $wsResponse)
{
// autoload_runtime.php @generated by Symfony Runtime


    global $_GET;
    global $_POST;
    global $_COOKIE;
    global $_FILES;
    global $_SERVER;

    $_GET = $wsRequest->get ?? [];
    $_POST = $wsRequest->post ?? [];
    $_COOKIE = $wsRequest->cookie ?? [];
    $_FILES = $wsRequest->files ?? [];
    $_SERVER = $wsRequest->server ?? [];

    $app = function (array $context) {

        return new Kernel($context['APP_ENV'], (bool)$context['APP_DEBUG']);
    };

    $runtime = $_SERVER['APP_RUNTIME'] ?? $_ENV['APP_RUNTIME'] ?? 'Symfony\\Component\\Runtime\\SymfonyRuntime';
    $runtime = new $runtime(($_SERVER['APP_RUNTIME_OPTIONS'] ?? $_ENV['APP_RUNTIME_OPTIONS'] ?? []) + [
            'project_dir' => dirname(__DIR__, 1),
        ]);
    [$app, $args] = $runtime
        ->getResolver($app)
        ->resolve();
    $app = $app(...$args);
    $r = Request::createFromGlobals();
    /* @var $response Symfony\Component\HttpFoundation\Response */
    $response = $app->handle($r);
    /*
     *        // headers have already been sent by the developer
        if (headers_sent()) {
            return $this;
        }

        // headers
        foreach ($this->headers->allPreserveCaseWithoutCookies() as $name => $values) {
            $replace = 0 === strcasecmp($name, 'Content-Type');
            foreach ($values as $value) {
                header($name.': '.$value, $replace, $this->statusCode);
            }
        }

        // cookies
        foreach ($this->headers->getCookies() as $cookie) {
            header('Set-Cookie: '.$cookie, false, $this->statusCode);
        }

        // status
        header(sprintf('HTTP/%s %s %s', $this->version, $this->statusCode, $this->statusText), true, $this->statusCode);

     * */
    foreach ($response->headers as $k => $v) {
        if (count($v) > 1) {
            var_dump('Dziwny header!!!!!!!! co z tym zrobiÄ‡!!!!!!', $k, $v);
        }
        $wsResponse->setHeader($k, $v[0]);
    }

    $wsResponse->end($response->getContent());
    $app->terminate($r, $response);
}

function revriteHeaders(Symfony\Component\HttpFoundation\Response $ymsfonyResponse, $wsResponse)
{

    foreach ($ymsfonyResponse->headers->allPreserveCaseWithoutCookies() as $name => $values) {
        $replace = 0 === strcasecmp($name, 'Content-Type');
        foreach ($values as $value) {
            header($name.': '.$value, $replace, $ymsfonyResponse->getStatusCode());
        }
    }

    // cookies
    foreach ($ymsfonyResponse->headers->getCookies() as $cookie) {
        header('Set-Cookie: '.$cookie, false, $ymsfonyResponse->getStatusCode());
    }

    // status
    header(
        sprintf('HTTP/%s %s %s',
            $ymsfonyResponse->getProtocolVersion(),
            $ymsfonyResponse->getStatusCode(),
            Symfony\Component\HttpFoundation\Response::$statusTexts[$ymsfonyResponse->getStatusCode()] ?? 'unknown status',
        ),
        true, $ymsfonyResponse->getStatusCode()
    );


}